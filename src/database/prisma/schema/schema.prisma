generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  password      String
  role          Role           @default(USER)
  ownedProjects Project[]      @relation("OwnedProjects") // Owner
  projects      Project[]      @relation("UserProjects") // Member
  tasks         Task[]         @relation("Assignee")
  comments      Comment[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User      @relation("OwnedProjects", fields: [ownerId], references: [id])
  members     User[]    @relation("UserProjects")
  tasks       Task[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Task {
  id           String           @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus       @default(PENDING)
  priority     TaskPriority     @default(MEDIUM)
  assigneeId   String?
  assignee     User?            @relation("Assignee", fields: [assigneeId], references: [id])
  projectId    String
  project      Project          @relation(fields: [projectId], references: [id])
  dependencies TaskDependency[] @relation("TaskToDependencies")
  dependents   TaskDependency[] @relation("TaskToDependents")
  comments     Comment[]
  dueDate      DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model TaskDependency {
  taskId      String
  dependsOnId String

  task      Task @relation("TaskToDependencies", fields: [taskId], references: [id])
  dependsOn Task @relation("TaskToDependents", fields: [dependsOnId], references: [id])

  @@id([taskId, dependsOnId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  taskId    String
  projectId String
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
