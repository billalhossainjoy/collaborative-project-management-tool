generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String?
  avatar    String?
  role      Role       @default(MEMBER)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relationships
  ownedProjects  Project[]       @relation("ProjectOwner")
  projectMembers ProjectMember[]
  assignedTasks  Task[]
  createdTasks   Task[]          @relation("TaskCreator")
  comments       Comment[]
  notifications  Notification[]
  activities     Activity[]
  timeEntries    TimeEntry[]

  // Settings
  settings UserSettings?

  @@map("users")
}

model UserSettings {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Notification preferences
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  taskReminders      Boolean @default(true)
  projectUpdates     Boolean @default(true)
  weeklyDigest       Boolean @default(true)

  // Appearance
  theme    String @default("system")
  language String @default("en")
  timezone String @default("UTC")

  // Privacy
  profileVisibility String  @default("team")
  showEmail         Boolean @default(false)
  showLastSeen      Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_settings")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  priority    Priority      @default(MEDIUM)
  progress    Int           @default(0)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  color       String        @default("#3b82f6")

  // Owner
  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])

  // Relationships
  members    ProjectMember[]
  tasks      Task[]
  activities Activity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  progress    Int        @default(0)

  // Dates
  startDate   DateTime?
  dueDate     DateTime?
  completedAt DateTime?

  // Relationships
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   User?   @relation(fields: [assigneeId], references: [id])

  creatorId String
  creator   User   @relation("TaskCreator", fields: [creatorId], references: [id])

  // Hierarchy
  parentId String?
  parent   Task?   @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks Task[]  @relation("TaskHierarchy")

  // Additional data
  tags           String[]
  estimatedHours Float?
  actualHours    Float?

  // Relationships
  comments    Comment[]
  activities  Activity[]
  timeEntries TimeEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

model Comment {
  id       String @id @default(cuid())
  content  String
  taskId   String
  authorId String

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  description String
  metadata    Json?

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id])

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())

  @@map("activities")
}

model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  hours       Float
  date        DateTime

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id])

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("time_entries")
}

model Notification {
  id       String           @id @default(cuid())
  title    String
  message  String
  type     NotificationType
  read     Boolean          @default(false)
  metadata Json?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("notifications")
}

// Enums
enum Role {
  ADMIN
  MANAGER
  MEMBER
  VIEWER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_ASSIGNED
  PROJECT_CREATED
  PROJECT_UPDATED
  MEMBER_ADDED
  MEMBER_REMOVED
  COMMENT_ADDED
  FILE_UPLOADED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE
  PROJECT_UPDATE
  MENTION
  SYSTEM
}
